@inject IStore store
@inject AdsControl adsControl
@inject ProtectedLocalStorage localStorage
@inject IUserController userController
@inject IProductController productController
@inject SignalRService signalR
@inject IUserController uc
@inject IDatabase database
@inject NavigationManager navigationManager

<header class="header">
    @if (store.State().ActiveUser.User.Filepath != "")
    {
        <span class ="logo">@projectName <img src="@store.State().ActiveUser.User.Filepath" /></span>
    }
    else
    {
        <span class="logo">@projectName <i class="fas fa-shopping-cart"></i></span>
    }

    <nav @onclick="ToggleOff" class="@navbarClass">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">Shop</NavLink>
        <NavLink class="nav-link" href="account">Account</NavLink>
        <NavLink class="nav-link" href="reviews">Reviews</NavLink>
        @if (!string.IsNullOrEmpty(store.State().ActiveUser.User.Id) && (store.State().ActiveUser.User.IsAdmin || store.State().ActiveUser.User.IsVendor))
        {
            <NavLink class="nav-link" href="orders"> Orders</NavLink>
            <NavLink class="nav-link" href="admin">Admin</NavLink>
        }
        @if (store.State().ActiveUser.User.IsAdmin)
        {
            <NavLink class="nav-link" href="" @onclick="logUpload">Upload</NavLink>
            <NavLink class="nav-link" href="manage-ads">Ads</NavLink>
            <NavLink class="nav-link" href="users">Users</NavLink>
            <span class="print">
                <NavLink class="nav-link" href="print">Print</NavLink>
            </span>
        }
    </nav>

    <div class="icon">
        @if (@store.State().Cart.Items.Count > 0)
        {
            <div class="fas fa-shopping-cart" id="blog-btn" @onclick="gotoCart"><span class="cart-number">@store.State().Cart.Items.Count</span></div>
        }
        else
        {
            <div class="fas fa-shopping-cart" id="blog-btn" @onclick="gotoCart"></div>
        }
        <a class="fab fa-whatsapp" href="https://api.whatsapp.com/send?phone=2348181734574"></a>
        <div class="fas fa-search" id="search-btn" @onclick="Search"></div>
        <div class="fas fa-user" id="login-btn" @onclick="ToggleLoginForms"></div>
        <div class="fas fa-bars" id="menu-btn" @onclick="ToggleNavbar"></div>
    </div>

    <div class="@searchFormClass">
        <SearchForm/>
    </div>
    <div class="@loginFormClass">
        <div @onclick="close" class="close">x</div>
        <LoginForm />
        <b> Already have an account? <span @onclick="ToggleToSignupForm" id="goto-signup">login now</span></b>
    </div>
    <form class="@signupFormClass">
        <div @onclick="close" class="close">x</div>
        <SignupForm />
        <b>don't have an account <span @onclick="ToggleToLoginForm" id="goto-login">create now</span></b>
    </form>
    <div class="@shoppingCartClass">
        <div @onclick="closeCart" class="close">x</div>
        <Cart></Cart>
    </div>
    <div class="@UploadClass">
        <div @onclick="closeUpload" class="close">x</div>
        <Upload></Upload>
    </div>
</header>

@code {
    string projectName = "Shop Now";
    private bool showSearchForm = false;
    private string searchFormClass => showSearchForm ? "search-form active" : "search-form";

    private bool showNavbar = false;
    private string navbarClass => showNavbar ? "navbar active" : "navbar";

    private string loginFormClass => store.State().LoginClicker.ShowLogin ? "login-form login active" : "login-form login";
    private string signupFormClass => store.State().LoginClicker.ShowSignup ? "login-form sign-up active" : "login-form sign-up";

    private bool showLogin { get; set; } = false;

    private string shoppingCartClass => store.State().CartClicker.ShowCart ? "shopping-cart active" : "shopping-cart";

    private string UploadClass => store.State().UploadClicker.ShowUpload ? "login-form upload-form active" : "upload-form";
    public HubConnection hubConnection => signalR.HubConnection;
    protected override async Task OnInitializedAsync()
    {
        GetProjectName();
        GetAllUsers();
        await adsControl.GetAds();
        signalR.HubConnection.On<User,string>("AddNewUser", OnNewUserAdded);
        store.AddStateChangedListeners(() => { updateChange(); });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && store.State().ActiveUser.User.Id == "")
        {
            await GetUserFromCookie();
        }
    }
    public void Dispose()
    {
        store.RemoveStateChangedListeners(() => { updateChange(); });
    }
    private void updateChange()
    {
        StateHasChanged();
    }
    private async Task GetUserFromCookie()
    {
        try
        {
            var result = await localStorage.GetAsync<string>("user");
            var value = result.Value;
            // var value = (await localStorage.GetAsync<string>("digicart-user")).Value;
            if (!string.IsNullOrEmpty(value))
            {
                var user = await uc.ReadUser(value ?? "");
                if (user != null && !string.IsNullOrEmpty(user.Id))
                {
                    store.AddActiveUser(user);
                }
            }
        }
        catch (Exception e)
        {
            string error = e.Message;
        }
    }
    private void ToggleToLoginForm()
    {
        store.LoginClick(true,false);
    }
    private void ToggleLoginForms()
    {
        showSearchForm = false;
        showNavbar = false;

        store.LoginClick(false,true);
        store.ShowCart(false);
        store.ShowUpload(false);
    }
    private void close()
    {
        store.LoginClick(false,false);
    }
    private void closeUpload()
    {
        store.ChangeProductVal(new());//refresh
        store.ShowUpload(false);
    }
    private void ToggleToSignupForm()
    {
        store.LoginClick(false,true);
    }

    private void ToggleNavbar()
    {
        showNavbar = !showNavbar;
        showSearchForm = false;

        store.LoginClick(false,false);
    }
    private void ToggleOff()
    {
        showSearchForm = false;
        showNavbar = false;

        store.LoginClick(false,false);
    }
    private async void GetProjectName()
    {
        string key = JsonConvert.SerializeObject("project");
        var data = await database.Read("Project", key);
        if (!string.IsNullOrEmpty(data.Value))
        {
            projectName = JsonConvert.DeserializeObject<string>(data.Value) ?? "Shop Now";
            store.AddProjectName(projectName);
        }
    }

    private void Search()
    {
        showSearchForm = !showSearchForm;
        showNavbar = false;

        store.LoginClick(false,false);
    }
    private void closeCart()
    {
        store.ShowCart(false);
    }
    private void gotoCart()
    {
        store.ShowCart(true);
        ToggleOff();
    }
    private void logUpload()
    {
        store.ShowUpload(true);
    }
    private void GetAllUsers()
    {
        var Users = userController.ReadAllUsers().Result;
        store.UpdateUsersList(Users);
    }
    private void OnNewUserAdded(User user, string operation)
    {
        List<User> users = store.State().Users.Data.ToList();
        if (operation == "add")
        {
            users.Add(user);
        } 
        else if(operation == "delete")
        {
            users = users.Where(u => u.Id != user.Id).ToList();
        }
        store.UpdateUsersList(users);
        InvokeAsync(StateHasChanged);
    }
}