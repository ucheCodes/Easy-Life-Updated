@page "/account"
@inject IStore store
@inject SignalRService signalR
@inject IOrderController orderController
@inject IAccountController accountController
@inject IEncryptionHelper encryptionHelper

<section class="account">
    <h1 class="heading">User <span>Account</span></h1>
    @if (string.IsNullOrEmpty(store.State().ActiveUser.User.Id))
    {
        <div @onclick="LogNewUser" class="info">
            <div class="flex-col">
                <h3>User Name</h3>
                <h3>080xxxyyyzz</h3>
                <h3>abc@xyz.net</h3>
            </div>
            <div class="flex-col">
                <img src="./img/user-2.png" />
                <em class="error">user name</em>
            </div>
        </div>
    }
    else
    {
        <div class="info">
            <div class="flex-col">
                <h3><i class="fas fa-user"></i> @store.State().ActiveUser.User.Username</h3>
                <h3><i class="fas fa-phone"></i> @store.State().ActiveUser.User.Mobile</h3>
                <h3><i class="fas fa-envelope"></i> @store.State().ActiveUser.User.Email</h3>
                <h3><i class="fas fa-map-marker-alt"></i> @store.State().ActiveUser.User.Center</h3>
                <h3 class="error" @onclick="EditAccount"><i class="fas fa-edit"></i> Edit account Info</h3>
            </div>
            <div class="flex-col">
                @if (string.IsNullOrEmpty(store.State().ActiveUser.User.Filepath))
                {
                    <img src="./img/user-2.png" />
                }
                else
                {
                   <img src="@store.State().ActiveUser.User.Filepath" />
                }
                <em class="online">online</em>
            </div>
        </div>
    }
    <div class="box-container">
        <div @onclick="EnableWallet" class="box @(activeContainerClass == "wallet" ? "active" : "")">
            <h3>Wallet <i class="fas fa-wallet"></i></h3>
            <h3>@naira @userWallet.Balance</h3>
            @if (userWallet.UserId != "")
            {
                <strong>Wallet Id: @userWallet.WalletId</strong>
            }
        </div>
        <div @onclick="ViewOrders" class="box @(activeContainerClass == "orders" ? "active" : "")">
            <h3>Orders <i class="fas fa-shopping-bag"></i></h3>
            <h3>@newOrdersCount</h3>
        </div>
        <div @onclick="ViewApproved" class="box @(activeContainerClass == "approved" ? "active" : "")">
            <h3>Deliveries <i class="fas fa-truck"></i></h3>
            <h3>@approved.Count</h3>
        </div>
        <div @onclick="ViewNotifications" class="box @(activeContainerClass == "notif" ? "active" : "")">
            <h3>Notifications <i class="far fa-bell"></i></h3>
            <h3>@notificationsCount</h3>
        </div>
@*        <div @onclick="(() => {selected = 4;})" class="box">
            <h3>Transactions <i class="far fa-credit-card"></i></h3>
            <h3>@pt.Count</h3>
        </div>*@
    </div>
    @switch (selected)
    {
        case 1:
        if (userWallet.UserId != "")
            {
                <WalletView wallet="userWallet"/>
            }
            else
            {
                <p class="p">Kindly login to enable Wallet</p>
            }
        break;
        case 2:
            if(newOrders.Count > 0)
            {
                <NewOrderTable orders="newOrders"  TableTitle="Orders" />
                @*<DynamicTables TableItems="newOrders" InitializeSortByTime="true" TableTitle="Orders" />*@
                @*<OrderTable orders="orders" TableTitle="Ordered Products" />*@
            }
            else
            {
                <p class="p">You have made no order on this platform</p>
            }
            break;
        case 3:
            if (approved.Count > 0)
            {
                <NewOrderTable orders="approved" TableTitle="Delivered Products" />
            }
            else
            {
                <p class="p">No approved deliveries</p>
            }
            break;
        case 4:
            if (notifications.Count > 0)
            {
                <section class="dynamic-table">
                    <div class="table-header">
                        <h1 class="heading">Notifications</h1>
                    </div>
                    <div class="scanty">
                        <table>
                            <thead>
                                <tr>
                                    <th>S/N</th>
                                    <th>Message</th>
                                    <th>Transaction Id</th>
                                    <th>Payment Channel</th>
                                    <th>Date</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var n in notifications)
                                {
                                    <tr>
                                        <td>@count</td>
                                        <td>@n.Message</td>
                                        <td>@n.PaymentId</td>
                                        <td>@n.PaymentOption</td>
                                        <td>@n.Date.ToString("ddd, dd MMM yyyy")</td>
                                        <td>@n.Date.ToString("hh : mm tt")</td>
                                    </tr>
                                    count++;
                                }
                            </tbody>
                        </table>
                    </div>
                </section>
            }
            else
            {
                <p class="p"> No notifications</p>
            }
            break;
        default:
            <p></p>
        break;
    }
    <Ads section="products"/>
</section>

@code {
    char naira = (char)8358;
    int selected = 2;
    int count = 1;
    int newOrdersCount = 0;
    int notificationsCount = 0;
    string codeAcronym = "DF";
    string activeContainerClass = "orders";
    Wallet userWallet = new();
    List<AccountNumber> accountNumbers = new();
    List<AccountNotification> notifications = new();

    List<NewOrder> newOrders = new();
    List<NewOrder> n = new();
    List<NewOrder> pending = new();
    List<NewOrder> approved = new();
    List<NewOrder> cancelled = new();

    List<Orders> orders = new();
    List<PaystackTransaction> pt = new();
    List<Orders> delivered = new();
    List<string> IgnoreOrderHeader = new List<string>() { "AuthorizationUrl","Products", "IsValid" };
    public HubConnection hubConnection => signalR.HubConnection;
    //protected override async Task  OnInitializedAsync()
    //{
    //    orders = (await orderController.GetAllOrders()).Where(d => d.Email.ToLower().Equals(store.State().ActiveUser.User.Email.ToLower())).ToList();
    //    var allPt = await orderController.GetAllPaystackTransaction();
    //    delivered = orders.Where(d => d.IsDelivered).ToList();
    //    pt = allPt.Where(p => p.Email.ToLower().Equals(store.State().ActiveUser.User.Email.ToLower())).ToList();
    //    store.AddStateChangedListeners(() => { StateHasChanged(); });
    //}
    protected override async Task OnInitializedAsync()
    {
        if (store.State().NewOrders.Data.Count > 0)
        {
            n = store.State().NewOrders.Data.ToList();
        }
        else
        {
            n = (await orderController.GetAllNewOrdersForEasyLifeUpdate()).OrderByDescending(x => x.Date).ToList();
            store.UpdateNewOrders(n);
        }
        count = 1;
        newOrders = n.Where(d => d.UserId.Equals(store.State().ActiveUser.User.Id)).OrderByDescending(x => x.Date).ToList();
        approved = newOrders.Where(x => x.Status.Equals(OrderStatus.Approved)).ToList();
        newOrdersCount = newOrders.Where(x => x.IsViewed.Equals(false)).ToList().Count;
        GetNotifications();
        GetCodeAcronym();
        GetWalletData();
        signalR.HubConnection.On<Wallet, AccountNotification>("NewWalletUpdate", OnNewWalletUpdate);
        signalR.HubConnection.On<NewOrder>("NewOrderReceived", NewOrderReceived);
        store.AddStateChangedListeners(() => { StateHasChanged(); });
    }
    private void EditAccount()
    {
        store.State().ActiveUser.User.IsEditAccount = true;
        store.LoginClick(true, false);
    }
    private void GetCodeAcronym()
    {
        if (store.State().Project.Name.Equals("Easy Life"))
        {
            codeAcronym = "EL";
        }
        else if (store.State().Project.Name.Equals("Digicart"))
        {
            codeAcronym = "DG";
        }
        else if (store.State().Project.Name.Equals("PSN Cart"))
        {
            codeAcronym = "PNC";
        }
    }
    private void GetNotifications()
    {
        notifications = store.State().AllWalletsInfo.AccountNotifications.Where(z => z.UserId.Equals(store.State().ActiveUser.User.Id)).ToList();
        notificationsCount = notifications.Where(n => !n.IsViewed).Count();
    }
    private void LogNewUser()
    {
        store.LoginClick(true, false);
    }
    private async void EnableWallet()
    {
        activeContainerClass = "wallet";
        try
        {
            if (string.IsNullOrEmpty(store.State().ActiveUser.User.Id))
            {
                store.LoginClick(false, true);
            }
            else
            {
                bool EncWalletExists = (accountController.EncryptedDataExists(store.State().ActiveUser.User.Id)).Result;
                if (userWallet.UserId == "" && !EncWalletExists)
                {
                    int walletCount = accountController.GetEncryptedDataCount();
                    int code = walletCount + 1200;
                    Wallet w = new Wallet()
                        {
                            Balance = 0,
                            UserId = store.State().ActiveUser.User.Id,
                            WalletId = $"{codeAcronym}{code}",
                            EncryptionId = store.State().ActiveUser.User.Id,
                        };
                    string serializedData = JsonConvert.SerializeObject(w);
                    var isCreated = accountController.EncryptData(serializedData, w.EncryptionId, DataFrom.wallet);
                    if (isCreated.Result)
                    {
                        var an = new AccountNotification() { };
                        await signalR.HubConnection.SendAsync("AddNewWalletUpdate", w, an);
                    }
                }
                else if (userWallet.UserId == "" && EncWalletExists)
                {
                    GetWalletData();
                }
                selected = 1;
            }
        }
        catch (Exception)
        {
        }
    }
    private void ViewOrders()
    {
        selected = 2;
        activeContainerClass = "orders";
        var isAllNewOrdersViewed = newOrders.All(x => x.IsViewed);
        if (!isAllNewOrdersViewed)
        {
            foreach (var ord in newOrders)
            {
                if (!ord.IsViewed)
                {
                    ord.IsViewed = true;
                    var isAdded = orderController.AddNewOrderForEasyLifeUpdate(ord);
                }
            }
            newOrdersCount = 0;
        }
    }
    private void ViewApproved()
    {
        activeContainerClass = "approved";
        selected = 3;
    }
    private void ViewNotifications()
    {
        selected = 4;
        activeContainerClass = "notif";
        var isAllNotifViewed = notifications.All(x => x.IsViewed);
        if (!isAllNotifViewed)
        {
            foreach (var n in notifications)
            {
                if (!n.IsViewed)
                {
                    n.IsViewed = true;
                    var isAdded = accountController.CreateAccountNotification(n);
                }
            }
            notificationsCount = 0;
        }
    }
    private void GetWalletData()
    {
        if (!string.IsNullOrEmpty(store.State().ActiveUser.User.Id))
        {
            userWallet = store.State().AllWalletsInfo.Wallets.FirstOrDefault(x => x.UserId.Equals(store.State().ActiveUser.User.Id)) ?? new();
        }
    }
    private void OnNewWalletUpdate(Wallet wallet, AccountNotification notif)
    {
        if (wallet.UserId.Equals(store.State().ActiveUser.User.Id))
        {
            userWallet = wallet;
            List<Wallet> allWallets = store.State().AllWalletsInfo.Wallets.Where(x => x.WalletId != wallet.WalletId && x.UserId != wallet.UserId).ToList();
            allWallets.Add(wallet);
            List<AccountNotification> walletNotifications = store.State().AllWalletsInfo.AccountNotifications.ToList();
            if (notif.Id != "")
            {
                walletNotifications.Insert(0, notif);
                notifications.Insert(0, notif);
                notificationsCount += 1;
            }
            count = 1;
            store.UpdateWalletsInformation(allWallets, walletNotifications);
            InvokeAsync(StateHasChanged);
        }
    }
    private void NewOrderReceived(NewOrder order)
    {
        if (order.UserId.Equals(store.State().ActiveUser.User.Id))
        {
            newOrdersCount += 1;
            if (!activeContainerClass.Equals("order"))//If order class is active, the signalR will fire in the NewOrderTable component
            {
                var orders = store.State().NewOrders.Data.ToList().Where(x => x.Id != order.Id).ToList();
                orders.Insert(0, order);
                newOrders.Insert(0, order);
                store.UpdateNewOrders(orders);
                approved = newOrders.Where(x => x.Status.Equals(OrderStatus.Approved)).ToList();
                InvokeAsync(StateHasChanged);
            }
        }
    }
    public void Dispose()
    {
        store.RemoveStateChangedListeners(() => { StateHasChanged(); });
    }
}
