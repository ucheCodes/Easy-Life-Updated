@inject IStore store@inject HttpClient httpClient@inject IOrderController orderController@inject IUserController userController@inject IMailService mailService@inject IProductController productController@inject NavigationManager navigationManager@inject SignalRService signalR@inject IAccountController accountController@inject IEncryptionHelper encryptionHelper@implements IDisposable@if (store.State().Cart.Items.Count > 0)		  {		   <div>			@foreach (var item in store.State().Cart.Items)			{				<div class="box">						<i @onclick="(() => store.RemoveFromCart(item))" class="fas fa-trash"></i>						<div class="img">							<img src="@item.Filepath" alt="cart">						</div>						<div class="content">							<h3>@item.Name</h3>							<span class="price item">@naira @((item.Price * item.Quantity).ToString("N0"))</span>							<span class="quantity item">qty: @item.Quantity</span>							<div class="symbols" @onclick="(() => store.ComputeCartTotal())">								<span @onclick="(() => {item.Quantity++;})">&and;</span>								@if (item.Quantity > 1)								{								  <span @onclick="(() => {item.Quantity--;})">&or;</span>								}							</div>						</div>					</div>	   }		<div class="total">			@if (paymentChannel.Equals("paystack") && store.State().Paystack.Charge > 0)
			{
				double netSum = store.State().CartTotal.Total - store.State().Paystack.Charge;				<small class="log">Net Sum: @netSum.ToString("N0")</small><br />				<em class="error">V.A.T : @store.State().Paystack.Charge.ToString("N0")</em><br />			}			Total : @naira @store.State().CartTotal.Total.ToString("N0")		</div>			 <div>			 <div class="@msgClass">				 @message				 <br>				@if (editAccount)
				{					<span @onclick="OpenEditForm" class="yellow cursor-pointer">Click here to Edit Account</span>				}			</div>				<input disabled maxlength="140" type="email" @bind="store.State().ActiveUser.User.Email" placeholder="Enter your email address" class="input">				<input disabled maxlength="40" type="tel" @bind="store.State().ActiveUser.User.Mobile" placeholder="Enter valid mobile number" class="input">			<select @onchange="ModifyPaymentChannel" class="input">				<option value="null">Select Payment Channel</option>				<option value="cash">Pay Cash on Delivery</option>				<option value="paystack">Pay via Paystack</option>				<option value="wallet">Pay via Wallet</option>			 </select>			 </div>			<div class="coloured">				<small class="log">Total : @naira @store.State().CartTotal.Total.ToString("N0")</small><br>
				@if (paymentChannel == "wallet" && userWallet.Balance < store.State().CartTotal.Total)
				{
					if (store.State().ActiveUser.User.Id == "")
					{						<small class="error cursor-pointer" @onclick="(() => {store.ShowCart(false);store.LoginClick(false,true);})">Click to create account or log in</small>					}
					<a href="/account" class="btn">Fund Wallet</a>	
				}				else if (paymentChannel != "null")
				{					<a @onclick="OrderUpdatedForEasyLifeOnly" class="btn">Pay @naira @store.State().CartTotal.Total.ToString("N0")</a>				}			</div>	</div>}else{	<div>		<p class="log p">@cartMsg</p>	</div>}@code {
	char naira = (char)8358;	string message = "";
	string msg = "";
	string msgClass = "error";
	string cartMsg = "Empty Cart";	string paymentChannel = "null";	string domainName = "";	bool isEmailValid = false;	bool isMobileValid = false;	bool isUserWalletInitialized = false;
	bool editAccount = false;
	Wallet userWallet = new();	List<User> users = new();
	List<string> payments = new();	public string data { get; set; } = string.Empty;
	public HubConnection hubConnection => signalR.HubConnection;	string paystack_public_key = "";//"pk_test_89afab3000854e4e6ec835bf2f93c186403954ba";	string paystack_secret_key = "";//"sk_test_f2fe38be54d1f55fd08bedc1d8b4a218b11f13d4";	protected override async Task OnInitializedAsync()	{
		if (store.State().Users.Data.Count > 0)
		{
			users = store.State().Users.Data.ToList();
		}
		else
		{
			users = await userController.ReadAllUsers();
			store.UpdateUsersList(users);
		}		var uri = new Uri(navigationManager.Uri);		domainName = uri.Host;		GetPaystackKeys();		store.AddStateChangedListeners(() => { StateHasChanged(); });	}	protected override void OnAfterRender(bool firstRender)	{		if (!string.IsNullOrEmpty(store.State().ActiveUser.User.Id) && !isUserWalletInitialized)		{
			GetWalletData();		}
		cartMsg = "Empty Cart";
		message = "";
		msgClass = "error";	}	private void OpenEditForm()
	{
		editAccount = false;
		store.State().ActiveUser.User.IsEditAccount = true;
		store.ShowCart(false);
		store.LoginClick(true, false);
	}	private void GetLogisticFee(ChangeEventArgs e)	{		/*The drop down for this has been removed and changed to wallet payment drop down*/		double result = 0;//remember to add 100 naira to whatever logistic value		double.TryParse(e.Value?.ToString(), out result);		store.State().LogisticFee = result;		store.ComputeCartTotal();//whatever location chosen must be sent to orders	}	private async void GetPaystackKeys()	{		var dict = await productController.GetPaystackKeys();		if (dict != null  && dict.Count > 0)		{			paystack_public_key = dict["public"];			paystack_secret_key = dict["secret"];		}	}
	private void ModifyPaymentChannel(ChangeEventArgs e)
	{
		paymentChannel = e.Value?.ToString() ?? "";
		store.ModifySelectedPaymentChannel(paymentChannel);
	}	private bool IsMobileValid(string mobile)	{		if (!string.IsNullOrEmpty(mobile))		{			//string pattern = @"^\+(?:\d{1,3})?\d{10}$";			string pattern = @"^(?:\+?\d{1,3})?(?:0|\d{1,4})\d{10}$";//@"^(?:\+?\d{1,3})?\d{10}$";			Regex regex = new Regex(pattern);			if (mobile.Contains("+") || (!mobile.Contains("+") && mobile.Length == 11 && mobile.StartsWith("0")))			{				isMobileValid = regex.IsMatch(mobile);				if (!isMobileValid)				{					message = "Mobile must have max of 14 characters \n" +						"It may include '+' sign, country code and mobile digits";				}				else { message = ""; }				return isMobileValid;			}			else			{				message = "Mobile number is not in a correct format";			}		}		return false;	}	private bool IsValidEmail(string email)	{		string pattern = @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$";		Regex regex = new Regex(pattern);		this.isEmailValid = regex.IsMatch(email);		if (this.isEmailValid)		{			this.message = string.Empty;		}		else		{			this.message = "email field is invalid, email must be in the form abc@xyz.com";		}		return regex.IsMatch(email);	}	private async Task SendMail(string customerEmail, string reference)	{//review later when more than one campus is involved
		string reviewLink = domainName + "/reviews";//hope it works		string mailBody = $"<p>Your order with reference Id {reference} is well received on {DateTime.Now.ToString("ddd, dd MMM yyyy")}. THANK YOU!!! for keeping us in business. </p><p>Click <a href=\"https://{reviewLink}\">{reviewLink}</a> and kindly leave us a review about our service</p>";
		var admins = users.Where(user => user.IsAdmin || user.IsVendor).ToList();
		foreach (var user in admins)		{
			var mail = user.Email;			string body = $"<p>You have a new order placed by {customerEmail} on {DateTime.Now.ToString("ddd, dd MMM yyyy")} with reference Id {reference} in your E-commerce domain. Please do well to check and validate the transaction and do the needful.</p><p>Click <a href=\"https://{domainName}\">{domainName}</a> to access your E-commerce domain.</p>";			await mailService.Send("peters.soft.network@gmail.com", mail, "New Order received at " + domainName, body);		}		await mailService.Send("peters.soft.network@gmail.com", customerEmail, "New Order received at " + domainName, mailBody);	}
	private async Task<string> PayByWallet()
	{
		try
		{
			Random rnd = new Random();
			if (paymentChannel.Equals("wallet") && userWallet.EncryptionId != "" && userWallet.WalletId != "" && userWallet.Balance >= store.State().CartTotal.Total)
			{
				double previousBalance = userWallet.Balance;
				userWallet.Balance -= store.State().CartTotal.Total;
				string serializedData = JsonConvert.SerializeObject(userWallet);
				string encryptionId = userWallet.EncryptionId;
				DataFrom dataFrom = DataFrom.wallet;
				var isSaved = accountController.EncryptData(serializedData, encryptionId, dataFrom);
				if (isSaved.Result)
				{
					string paymentId = $"{userWallet.WalletId}/{rnd.Next(1000, 9999)}";
					AccountNotification notif = AddFundNotification(paymentId, previousBalance, store.State().CartTotal.Total, userWallet.Balance, PaymentOption.wallet);
					message = "Payment by wallet successful!!!";
					msgClass = "log";
					previousBalance = 0;
					if (notif.Id != "")
					{
						await signalR.HubConnection.SendAsync("AddNewWalletUpdate", userWallet, notif);
						return paymentId;
					}
				}
			}
			else
			{
				message = "Insufficient wallet funds, kindly fund your account or select another payment channel";
				msgClass = "error";
			}
		}
		catch (Exception)
		{
			return string.Empty;
		}
		return string.Empty;
	}
	private AccountNotification AddFundNotification(string paymentId, double previousBalance, double creditAmount, double currentBalance, PaymentOption paymentOption)
	{
		var notif = new AccountNotification()
			{
				Id = Guid.NewGuid().ToString(),
				UserId = store.State().ActiveUser.User.Id,
				PaymentId = paymentId,//modify to fit paystack reference Id
				CreditType = CreditType.debit,
				PreviousBalance = previousBalance,
				TransactionalAmount = creditAmount,
				CurrentBalance = currentBalance,
				PaymentOption = paymentOption,//Modify to fit paystack and cash on delivery
				TransactionSection = TransactionSection.order,
				Message = $"Purchase of item(s) worth {naira}{creditAmount}",
				Date = DateTime.Now
			};
		var isAdded = accountController.CreateAccountNotification(notif);
		if (isAdded.Result)
		{
			return notif;
		}
		return new();
	}
	private async void AddToNewOrder(string paymentId,PaymentStatus p)
	{
		var newOrder = new NewOrder()
			{
				Date = DateTime.Now,
				Id = Guid.NewGuid().ToString(),
				PaymentId = paymentId,				Products = store.State().Cart.Items.ToList(),
				Status = OrderStatus.Pending,
				UserId = store.State().ActiveUser.User.Id,
				Price = store.State().CartTotal.Total,
				PaymentStatus = p,
				PaymentChannel = paymentChannel
			};
		var isAdded = await orderController.AddNewOrderForEasyLifeUpdate(newOrder);
		try
		{
			if (isAdded)
			{
				store.ClearCart();
				cartMsg = "Payment Transaction Validated! Thanks for your patronage \n kindly close this form";
				await signalR.HubConnection.SendAsync("NewOrderReceived", newOrder);
				await Task.Run(async () => await SendMail(store.State().ActiveUser.User.Email, paymentId));
			}
		}
		catch (Exception)
		{
		}
	}
	private void OrderUpdatedForEasyLifeOnly()
	{
		if (string.IsNullOrEmpty(store.State().ActiveUser.User.Id))
		{
			store.ShowCart(false);
			store.LoginClick(false, true);
		}
		else if (!string.IsNullOrEmpty(store.State().ActiveUser.User.Mobile) && !string.IsNullOrEmpty(store.State().ActiveUser.User.Email))
		{
			switch (paymentChannel)
			{
				case "wallet":
					var paymentId = PayByWallet();
					if (paymentId.Result.ToString() != "")
					{
						AddToNewOrder(paymentId.Result.ToString(), PaymentStatus.Paid);
					}
					break;
				case "paystack":
					Checkout();
					break;
				case "cash":
					PayCashOnDelivery();
					break;
				default:
					break;
			}
		}
		else
		{
			editAccount = true;
			message = "You cannot proceed without a valid Email and Mobile number, Kindly Edit account";
		}
	}
	private void PayCashOnDelivery()
	{
		Random rnd = new();
		string paymentId = $"cash/{rnd.Next(1000, 9999)}";
		AddFundNotification(paymentId, 0, store.State().CartTotal.Total, 0, PaymentOption.cash);
		AddToNewOrder(paymentId, PaymentStatus.Not_Paid);
	}
	private void GetWalletData()
	{
		if (!string.IsNullOrEmpty(store.State().ActiveUser.User.Id))
		{
			userWallet = store.State().AllWalletsInfo.Wallets.FirstOrDefault(x => x.UserId.Equals(store.State().ActiveUser.User.Id)) ?? new();
		}
	}	private async void Checkout()	{
		try
		{
			string email = store.State().ActiveUser.User.Email;
			string mobile = store.State().ActiveUser.User.Mobile;
			if (IsValidEmail(email) && IsMobileValid(mobile))
			{
				msg = "please wait while we authenticate payment channel ...";
				message = "";
				var _data = new PaystackData()
					{
						amount = store.State().CartTotal.Total * 100, //in kobo
						email = email,
						key = paystack_public_key
					};
				data = JsonConvert.SerializeObject(_data);


				// Send POST request to Paystack API with data and header// https://api.paystack.co/transaction/initialize
				string paystackAuthorizationUrl = string.Empty;
				bool isSuccess = false;
				using (var request = new HttpRequestMessage(HttpMethod.Post, "https://api.paystack.co/transaction/initialize"))
				{
					request.Headers.Add("Authorization", $"Bearer {paystack_secret_key}");
					var content = new StringContent(data, Encoding.UTF8, "application/json");
					request.Content = content;

					var response = await httpClient.SendAsync(request);
					isSuccess = response.IsSuccessStatusCode;
					if (response.IsSuccessStatusCode)
					{
						string responseContent = await response.Content.ReadAsStringAsync();
						if (responseContent != null)
						{
							dynamic responseObject = JsonConvert.DeserializeObject<dynamic>(responseContent) ?? "";
							paystackAuthorizationUrl = responseObject.data.authorization_url;
							var order = new Orders()
								{
									Reference = responseObject.data.reference,
									AccessCode = responseObject.data.access_code,
									AuthorizationUrl = responseObject.data.authorization_url,
									Email = email,
									Mobile = mobile,
									Products = store.State().Cart.Items.ToList(),
									Date = DateTime.Now
								};
							navigationManager.NavigateTo(paystackAuthorizationUrl);
							/*New Modifications to sync with the New Order Functions*/
							AddFundNotification(order.Reference, 0, store.State().CartTotal.Total, 0, PaymentOption.paystack);
							AddToNewOrder(order.Reference, PaymentStatus.Not_Paid);
							await orderController.AddPendingOrder(order);
							await Task.Run(async () => await signalR.HubConnection.SendAsync("OrderReceived", order));
						}
					}
				}
				message = string.Empty;
				store.SetPaystackAuthenticationUrl(isSuccess, paystackAuthorizationUrl);
				if (isSuccess)
				{
					msg = "";
				}
			}
			else
			{
				message = "please enter a valid mobile and email address";
			}
		}
		catch (Exception)
		{
		}	}	public void Dispose()
	{
		store.RemoveStateChangedListeners(() => { StateHasChanged(); });
	}}