@inject IAccountController accountController
@inject SignalRService signalR
@inject IStore store

<section>
    <div>
        <select @bind="selected" class="_input">
            <option value="1">Fund your Wallet</option>
            <option value="2">View Transactions</option>
        </select>
        @if (selected == "1")
        {
            <DynamicTables TableTitle="Fund Your Easy Life Wallet" SkipHeaderNames="skipWalletFundingHeader" TableItems="accountNumbers" />
            <p class="p">
                Kindly transfer any desired amount sufficient to make purchases
                on this platform to the account information(s) above.
            </p>
            <p class="p">
                After the transfer, send an email with your name, the transfer amount,
                date, time and your wallet Id to peters.soft.network@gmail.com
                for admin confirmation. Kindly use "@store.State().Project.Name Wallet Funding" as subject of the
                mail. Thanks for keeping us in business.
            </p>
            <p class="p">You can also send evidence of payment alongside your @store.State().Project.Name wallet Id to +2348181734574 on Whatsapp or click on the icon <a class="fab fa-whatsapp whatsapp-icon" href="https://api.whatsapp.com/send?phone=2348181734574"></a></p>
        }
        else if (selected == "2" && walletNotifications.Count > 0)
        {
            <WalletNotification allWalletNotifications="walletNotifications" />
        }
        else
        {
            <p class="p">No wallet history or transaction found.</p>
        }
    </div>
</section>

@code {
    private string selected = "1";
    List<string> skipWalletFundingHeader = new() { "Id","UserId","IsViewed", "Message" };
    [Parameter]
    public Wallet wallet { get; set; } = new();
    List<AccountNotification> walletNotifications = new();
    public HubConnection hubConnection => signalR.HubConnection;
    List<AccountNumber> accountNumbers = new()
    {
        new AccountNumber(){Account_Name = "Uche Nwuju Victor", Account_Number = "3075623338", Bank = "First Bank Plc"}
    };
    List<NewOrder> transactions = new() //Use this info to populate the transactions info
    {//There users can manage their orders and transaction status
        new NewOrder(){Id = "1", Date = DateTime.Now, PaymentChannel = "via wallet", Status = OrderStatus.Cancelled}, 
         new NewOrder(){Id = "2", Date = DateTime.Now, PaymentChannel = "via wallet", Status = OrderStatus.Cancelled},
          new NewOrder(){Id = "3", Date = DateTime.Now, PaymentChannel = "via wallet", Status = OrderStatus.Cancelled},
           new NewOrder(){Id = "4", Date = DateTime.Now, PaymentChannel = "via wallet", Status = OrderStatus.Cancelled},
            new NewOrder(){Id = "5", Date = DateTime.Now, PaymentChannel = "via wallet", Status = OrderStatus.Cancelled},
    };
    protected override async Task OnInitializedAsync()
    {
        accountNumbers = await accountController.GetAccountNumbers();
        walletNotifications = store.State().AllWalletsInfo.AccountNotifications.Where(z => z.UserId.Equals(wallet.UserId)).ToList();
        AppendWalletIdToAccountNumber();
        signalR.HubConnection.On<Wallet, AccountNotification>("NewWalletUpdate", OnNewWalletUpdate);
    }
    private void AppendWalletIdToAccountNumber()
    {
        if (accountNumbers.Count.Equals(1))
        {
            accountNumbers[0].Wallet_Id = wallet.WalletId;
        }
        else if (accountNumbers.Count > 1)
        {
            foreach (var num in accountNumbers)
            {
                num.Wallet_Id = wallet.WalletId;
            }
        }
    }
    private void OnNewWalletUpdate(Wallet w, AccountNotification notif)
    {
        if (wallet.UserId.Equals(w.UserId) && wallet.WalletId.Equals(w.WalletId) && notif.Id != "")
        {
            walletNotifications.Insert(0, notif);
            InvokeAsync(StateHasChanged);
        }
    }
}
