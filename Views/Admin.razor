@page "/admin"
@inject IAccountController accountController
@inject IUserController userController
@inject IAccountController accountController
@inject IOrderController orderController
@implements IDisposable

<section>
    <h1 class="heading">Admin <span>Panel</span></h1>
    <select @bind="selected" class="_input">
        <option value="1">Fund Wallet</option>
        <option value="2">View All New Orders</option>
        <option value="3">View Notifications</option>
        <option value="4">Add Account Info</option>
    </select>
    @switch (selected)
    {
        case 1:
            <div class="admin-form">
                <span class="@msgClass">@message</span>
                <input @onblur="(() => SearchWallet(walletSearchValue))" @bind-value="walletSearchValue" placeholder="Search user wallet Id"/>
                <select @onchange="SelectWallet">
                    <option value="">Available Wallets</option>
                    @foreach (var wallet in allWallets)
                    {
                        <option value="@wallet.WalletId">@wallet.WalletId</option>
                    }
                </select>
                <input readonly @bind-value="user.Username" placeholder="User's Wallet Name" />
                <input readonly @bind-value="selectedWallet.WalletId" placeholder="User's Wallet Id" />
                <input placeholder="Wallet Fund" @bind-value="creditAmount" />
                <button @onclick="ModifyFunds">Modify Funds</button>
            </div>
            break;
        case 2:
            <NewOrderTable orders="newOrders" TableTitle="Orders" IsAdminAuthorized="true"/>
            break;
        case 3:
            <select @onchange="QueryWalletNotifications" class="select-center">
                <option value="all">All</option>
                <option value="descending">Dates Descending</option>
                <option value="credit">Credits only</option>
                <option value="debit">Debits only</option>
                <option value="wallet">Payments via wallet only</option>
                <option value="paystack">Payments Via Paystack</option>
                <option value="cash">Payments on Deelivery (Cash)</option>
            </select>
            <DynamicTables TableTitle="Wallet Transactions"
                   TableItems="walletNotifications" SkipHeaderNames="skipWalletFundingHeader" />
        break;
        case 4:
            <div class="admin-form">
                <span class="@msgClass">@message</span>
                <input @bind-value="accountNumber.Account_Name" placeholder="Enter Account Name"/>
                <input @bind-value="accountNumber.Account_Number" placeholder="Enter Account Number" />
                <input @bind-value="accountNumber.Bank" placeholder="Enter Bank Name" />
                <button @onclick="AddAccountNumber">Add Account</button>
            </div>
            break;
        default:
        <div></div>
        break;
    }

</section>

@code{
    int selected = 1;
    char naira = (char)8358;
    string msgClass = "error";
    string walletSearchValue = "";
    string message = "";
    User user = new User();
    double creditAmount = 0;
    List<Wallet> allWallets = new();
    Wallet selectedWallet = new();
    AccountNumber accountNumber = new();
    List<string> skipWalletFundingHeader = new() { "Id", "UserId" };
    List<AccountNotification> walletNotifications = new();
    List<AccountNotification> allWalletNotifications = new();
    List<NewOrder> newOrders = new();
    protected override async Task OnInitializedAsync()
    {
        allWallets = await accountController.GetAndDecryptAllEncryptedData<Wallet>(DataFrom.wallet);
        allWalletNotifications = await accountController.GetAccountNotifications("admin");
        newOrders = (await orderController.GetAllNewOrdersForEasyLifeUpdate());
    }
    protected override void OnAfterRender(bool firstRender)
    {
        walletNotifications = allWalletNotifications;
    }
    private void SelectWallet(ChangeEventArgs e)
    {
        SearchWallet(e.Value?.ToString() ?? "");
        walletSearchValue = string.Empty;
    }
    private void SearchWallet(string walletId)
    {
        if (!string.IsNullOrEmpty(walletId))
        {
            selectedWallet = allWallets.Find(w => w.WalletId.Equals(walletId)) ?? new();
            if (selectedWallet.UserId != "")
            {
                user = userController.ReadUser(selectedWallet.UserId).Result;
                message = "";
            }
            else
            {
                user = new();
                msgClass = "error";
                message = "Wallet not Found! kindly choose from the drop-down list";
            }
        }
        else
        {
            user = new();
            selectedWallet = new();
        }
    }
    private void QueryWalletNotifications(ChangeEventArgs e)
    {
        string value = e.Value?.ToString() ?? "";
        switch (value)
        {
            case "all":
                walletNotifications = allWalletNotifications;
                break;
            case "descending":
                walletNotifications = allWalletNotifications.OrderByDescending(x => x.Date).ToList();
                break;
            case "credit":
                walletNotifications = allWalletNotifications.Where(x => x.CreditType.Equals(CreditType.credit)).ToList();
                break;
            case "debit":
                walletNotifications = allWalletNotifications.Where(x => x.CreditType.Equals(CreditType.debit)).ToList();
                break;
            case "wallet":
                walletNotifications = allWalletNotifications.Where(x => x.PaymentOption.Equals(PaymentOption.wallet)).ToList();
                break;
            case "paystack":
                walletNotifications = allWalletNotifications.Where(x => x.PaymentOption.Equals(PaymentOption.paystack)).ToList();
                break;
            case "cash":
                walletNotifications = allWalletNotifications.Where(x => x.PaymentOption.Equals(PaymentOption.cash)).ToList();
                break;
            default:
                walletNotifications = new();
                break;
        }
    }
    private void ModifyFunds()
    {
        if (selectedWallet.EncryptionId != "" && selectedWallet.WalletId != "" && creditAmount > 0)
        {
            double previousBalance = selectedWallet.Balance;
            selectedWallet.Balance += creditAmount;
            string serializedData = JsonConvert.SerializeObject(selectedWallet);
            string encryptionId = selectedWallet.EncryptionId;
            DataFrom dataFrom = DataFrom.wallet;
            var isSaved = accountController.EncryptData(serializedData, encryptionId, dataFrom);
            if (isSaved.Result)
            {
                AddFundNotification(selectedWallet.WalletId, previousBalance, creditAmount, selectedWallet.Balance);
                message = "Fund Modified Successfully!!!";
                msgClass = "log";
                user = new();
                previousBalance = 0;
                creditAmount = 0;
                selectedWallet = new();
            }
        }
    }
    private void AddFundNotification(string walletId, double previousBalance, double creditAmount, double currentBalance)
    {
        var notif = new AccountNotification()
            {
                Id = Guid.NewGuid().ToString(),
                UserId = user.Id,
                PaymentId = walletId,
                CreditType = CreditType.credit,
                PreviousBalance = previousBalance,
                TransactionalAmount = creditAmount,
                CurrentBalance = currentBalance,
                PaymentOption = PaymentOption.wallet,
                TransactionSection = TransactionSection.admin,
                Message = $"Credit of {naira} {creditAmount} from Admin to your Wallet",
                Date = DateTime.Now
            };
        var isAdded = accountController.CreateAccountNotification(notif);
    }
    private void AddAccountNumber()
    {
        if (!string.IsNullOrEmpty(accountNumber.Account_Number))
        {
            accountNumber.Id = Guid.NewGuid().ToString();
            var isAdded = accountController.CreateAccountNumber(accountNumber);
            if (isAdded.Result)
            {
                accountNumber = new();
                message = "Account added successfully";
                msgClass = "log";
            }
        }
    }
    public void Dispose()
    {
        allWallets = new();
    }
}
