@page "/admin"
@inject IAccountController accountController
@inject IUserController userController
@inject IAccountController accountController
@inject IOrderController orderController
@inject SignalRService signalR
@inject IStore store
@inject IMailService mailService
@implements IDisposable

<section>
    <h1 class="heading">Admin <span>Panel</span></h1>
    <select @bind="selected" class="_input">
        @if (store.State().ActiveUser.User.IsAdmin)
        {
            <option value="1">Fund  Users Wallet</option>
            <option value="2">View All Users Wallet</option>
            <option value="3">View Wallet Notifications</option>
            <option value="4">Add Account Info</option>
        }
        <option value="5">View All New Orders</option>
    </select>
    @switch (selected)
    {
        case 1:
            <div class="admin-form">
                <span class="@msgClass">@message</span>
                <input @onblur="(() => SearchWallet(walletSearchValue))" @bind-value="walletSearchValue" placeholder="Search user wallet Id"/>
                <select @onchange="SelectWallet">
                    <option value="">Available Wallets</option>
                    @foreach (var wallet in allWallets)
                    {
                        <option value="@wallet.WalletId">@wallet.WalletId</option>
                    }
                </select>
                <input readonly @bind-value="user.Username" placeholder="User's Wallet Name" />
                <input readonly @bind-value="selectedWallet.WalletId" placeholder="User's Wallet Id" />
                <input placeholder="Wallet Fund" @bind-value="creditAmount" />
                <select @bind="walletAction">
                    <option value="">Select Wallet Action</option>
                    <option value="credit">Credit Wallet</option>
                    <option value="revert">Debit Fund</option>
                </select>
                <button @onclick="ModifyFunds">Modify Funds</button>
            </div>
            break;
        case 2:
            <UserWalletBalanceView Wallets="allWallets"/>
            break;
        case 3:
            <WalletNotification IsFromAdmin=true allWalletNotifications="walletNotifications"/>
        break;
        case 4:
            <div class="admin-form">
                <span class="@msgClass">@message</span>
                <input @bind-value="accountNumber.Account_Name" placeholder="Enter Account Name"/>
                <input @bind-value="accountNumber.Account_Number" placeholder="Enter Account Number" />
                <input @bind-value="accountNumber.Bank" placeholder="Enter Bank Name" />
                <button @onclick="AddAccountNumber">Add Account</button>
            </div>
            break;
        case 5:
            <NewOrderTable orders="newOrders" TableTitle="Orders" IsAdminAuthorized="true" />
            break;
        default:
        <div></div>
        break;
    }
</section>

@code{
    int selected = 5;
    char naira = (char)8358;
    string msgClass = "error";
    string walletSearchValue = "";
    string message = "";
    User user = new User();
    double creditAmount = 0;
    string walletAction = "credit";
    List<Wallet> allWallets = new();
    List<NewOrder> newOrders = new();
    Wallet selectedWallet = new();
    AccountNumber accountNumber = new();
    List<string> skipWalletFundingHeader = new() { "Id", "UserId" };
    List<AccountNotification> walletNotifications = new();
    List<AccountNotification> allWalletNotifications = new();
    public HubConnection hubConnection => signalR.HubConnection;
    protected override async Task OnInitializedAsync()
    {
        allWallets = store.State().AllWalletsInfo.Wallets.OrderBy(x => x.WalletId).ToList();
        walletNotifications = store.State().AllWalletsInfo.AccountNotifications.ToList();
        if (store.State().NewOrders.Data.Count == 0)
        {
            newOrders = (await orderController.GetAllNewOrdersForEasyLifeUpdate()).OrderByDescending(x => x.Date).ToList();
            store.UpdateNewOrders(newOrders);
        }
        else
        {
            newOrders = store.State().NewOrders.Data.ToList();
        }
        signalR.HubConnection.On<Wallet, AccountNotification>("NewWalletUpdate", OnNewWalletUpdate);
    }
    private void SelectWallet(ChangeEventArgs e)
    {
        SearchWallet(e.Value?.ToString() ?? "");
        walletSearchValue = string.Empty;
    }
    private void SearchWallet(string walletId)
    {
        if (!string.IsNullOrEmpty(walletId))
        {
            selectedWallet = allWallets.FirstOrDefault(w => w.WalletId.Contains(walletId)) ?? new();
            if (selectedWallet.UserId != "")
            {
                user = store.State().Users.Data.FirstOrDefault(x => x.Id == selectedWallet.UserId) ?? new();
                //userController.ReadUser(selectedWallet.UserId).Result;
                if (user.Id == "")
                {
                    message = "User record no longer exists";
                    msgClass = "error";
                    selectedWallet = new();
                    user = new();
                }
                else
                {
                    message = "";
                }
            }
            else
            {
                user = new();
                msgClass = "error";
                message = "Wallet not Found! kindly choose from the drop-down list";
            }
        }
        else
        {
            user = new();
            selectedWallet = new();
        }
    }
    private async void ModifyFunds()
    {
        try
        {
            if (selectedWallet.EncryptionId != "" && selectedWallet.WalletId != "" && creditAmount > 0)
            {
                CreditType creditType = CreditType.none;
                double previousBalance = selectedWallet.Balance;
                if (walletAction.Equals("credit"))
                {
                    selectedWallet.Balance += creditAmount;
                    creditType = CreditType.credit;
                }
                else if (walletAction.Equals("revert") && selectedWallet.Balance > 0)
                {
                    selectedWallet.Balance -= creditAmount;
                    creditType = CreditType.debit;
                }
                if (creditType != CreditType.none)
                {
                    string serializedData = JsonConvert.SerializeObject(selectedWallet);
                    string encryptionId = selectedWallet.EncryptionId;
                    DataFrom dataFrom = DataFrom.wallet;
                    var isSaved = accountController.EncryptData(serializedData, encryptionId, dataFrom);
                    if (isSaved.Result && walletAction != "")
                    {
                        AccountNotification notif = AddFundNotification(selectedWallet.WalletId, previousBalance, creditAmount, selectedWallet.Balance, creditType);
                        message = "Fund Modified Successfully!!!";
                        msgClass = "log";
                        await signalR.HubConnection.SendAsync("AddNewWalletUpdate", selectedWallet, notif);
                        await mailService.Send("peters.soft.network@gmail.com", user.Email, $"{store.State().Project.Name} wallet Funds Activation", $"Your {store.State().Project.Name} wallet {selectedWallet.WalletId} is successfully {creditType}ed with {naira}{creditAmount.ToString("N0")} on {DateTime.Now.ToString("MMM dd, yyyy")} {DateTime.Now.ToString("hh:mm tt")}. Thanks for keeping us in business.");
                        previousBalance = 0;
                        creditAmount = 0;
                        selectedWallet = new();
                        user = new();
                    }
                }
                else
                {
                    message = "Fund Not Modified, select a wallet action!!!";
                    msgClass = "error";
                }
            }
        }
        catch (Exception)
        {
        }
    }
    private AccountNotification AddFundNotification(string walletId, double previousBalance, double creditAmount, double currentBalance, CreditType creditType)
    {
        var notif = new AccountNotification()
            {
                Id = Guid.NewGuid().ToString(),
                UserId = user.Id,
                PaymentId = walletId,
                CreditType = creditType,
                PreviousBalance = previousBalance,
                TransactionalAmount = creditAmount,
                CurrentBalance = currentBalance,
                PaymentOption = PaymentOption.wallet,
                TransactionSection = TransactionSection.admin,
                Message = $"{creditType} of {naira} {creditAmount} from Admin to your Wallet {walletId}",
                Date = DateTime.Now
            };
        var isAdded = accountController.CreateAccountNotification(notif);
        if (isAdded.Result)
        {
            return notif;
        }
        return new();
    }
    private void AddAccountNumber()
    {
        if (!string.IsNullOrEmpty(accountNumber.Account_Number))
        {
            accountNumber.Id = Guid.NewGuid().ToString();
            var isAdded = accountController.CreateAccountNumber(accountNumber);
            if (isAdded.Result)
            {
                accountNumber = new();
                message = "Account added successfully";
                msgClass = "log";
            }
        }
    }
    private void OnNewWalletUpdate(Wallet wallet, AccountNotification notif)
    {
        allWallets = store.State().AllWalletsInfo.Wallets.Where(x => x.WalletId != wallet.WalletId && x.UserId != wallet.UserId).ToList();
        allWallets.Add(wallet);
        allWallets = allWallets.OrderBy(x => x.WalletId).ToList();
        if (notif.Id != "")//Apply this where user will be a beneficiary
        {
            walletNotifications.Insert(0, notif);
        }
        store.UpdateWalletsInformation(allWallets, walletNotifications);
        InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        allWallets = new();
    }
}
